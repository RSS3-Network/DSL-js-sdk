// generated by src/types/generate.ts

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/data/v1/accounts/activities": {
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description actions limit, maximum 20 */
            action_limit?: number;
            /** @description address or domain */
            address: string[];
            cursor?: string | null;
            direction?: string | null;
            /** @description transactions limit, maximum 500 */
            limit?: number;
            network?: components["schemas"]["Network"][];
            platform?: components["schemas"]["Platform"][];
            success?: boolean | null;
            tag?: string[];
            timestamp?: components["schemas"]["Time"] | null;
            type?: string[];
          };
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": components["schemas"]["TransactionsResponse"];
          };
        };
      };
    };
  };
  "/data/v1/accounts/{address}/activities": {
    get: {
      parameters: {
        query?: {
          /**
           * @description transactions limit, maximum 500
           * @example 100
           */
          limit?: number;
          /**
           * @description actions limit, maximum 20
           * @example 10
           */
          action_limit?: number;
          cursor?: string | null;
          success?: boolean | null;
          direction?: string | null;
          timestamp?: components["schemas"]["Time"] | null;
          /** @example ethereum */
          network?: components["schemas"]["Network"][];
          tag?: string[];
          type?: string[];
          platform?: components["schemas"]["Platform"][];
        };
        path: {
          /**
           * @description address or domain
           * @example vitalik.eth
           */
          address: string;
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": components["schemas"]["TransactionsResponse"];
          };
        };
      };
    };
  };
  "/data/v1/accounts/{address}/assets": {
    get: {
      parameters: {
        query?: {
          /**
           * @description assets limit, maximum 100
           * @example 10
           */
          limit?: number;
          cursor?: string | null;
          refresh?: boolean;
        };
        path: {
          /**
           * @description address or domain
           * @example vitalik.eth
           */
          address: string;
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": components["schemas"]["AssetsResponse"];
          };
        };
      };
    };
  };
  "/data/v1/accounts/{address}/profiles": {
    get: {
      parameters: {
        query?: {
          network?: components["schemas"]["Network"][];
          platform?: components["schemas"]["Platform"][];
        };
        path: {
          /**
           * @description address or domain
           * @example vitalik.eth
           */
          address: string;
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": components["schemas"]["ProfilesResponse"];
          };
        };
      };
    };
  };
  "/data/v1/activities/{hash}": {
    get: {
      parameters: {
        query?: {
          /**
           * @description actions limit, minimum 1, maximum 20
           * @example 10
           */
          action_limit?: number;
          /**
           * @description actions pag, minimum 1
           * @example 1
           */
          action_page?: number;
        };
        path: {
          /**
           * @description hash
           * @example 0x0000002bb015fc5e691a57887924a1e00f697b2180c0bcc6e69d77931c98e5a6
           */
          hash: string;
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": components["schemas"]["TransactionResponse"];
          };
        };
      };
    };
  };
  "/data/v1/mastodon/{address}/activities": {
    get: {
      parameters: {
        query?: {
          /**
           * @description mastodon limit, maximum 40
           * @example 10
           */
          limit?: number;
        };
        path: {
          /** @description address */
          address: string;
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": components["schemas"]["TransactionsResponse"];
          };
        };
      };
    };
  };
  "/data/v1/platforms/{platform}/activities": {
    get: {
      parameters: {
        query?: {
          /** @description transactions limit, maximum 500 */
          limit?: number;
          /** @description actions limit, maximum 20 */
          action_limit?: number;
          cursor?: string | null;
          success?: boolean | null;
          direction?: string | null;
          timestamp?: components["schemas"]["Time"] | null;
        };
        path: {
          /**
           * @description platform
           * @example uniswap
           */
          platform: components["schemas"]["Platform"];
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": components["schemas"]["TransactionsResponse"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * AccountsTransactionsRequest
     * @description github.com/naturalselectionlabs/rss3api/internal/service/explorer/explorer/v1/handler.AccountsTransactionsRequest
     */
    AccountsTransactionsRequest: {
      /** @description actions limit, maximum 20 */
      action_limit?: number;
      /** @description address or domain */
      address: string[];
      cursor?: string | null;
      direction?: string | null;
      /** @description transactions limit, maximum 500 */
      limit?: number;
      network?: components["schemas"]["Network"][];
      platform?: components["schemas"]["Platform"][];
      success?: boolean | null;
      tag?: string[];
      timestamp?: components["schemas"]["Time"] | null;
      type?: string[];
    };
    /**
     * Action
     * @description For all the possible types of actions, see the Action in this doc.
     */
    Action: {
      from: string;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "transaction";
      to: string;
      /** @enum {string} */
      type: "transfer";
    } | {
      from: string;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "transaction";
      to: string;
      /** @enum {string} */
      type: "mint";
    } | {
      from: string;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "transaction";
      to: string;
      /** @enum {string} */
      type: "burn";
    } | {
      from: string;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "transaction";
      to: string;
      /** @enum {string} */
      type: "approval";
    } | {
      from: string;
      metadata: components["schemas"]["MultiSig"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "transaction";
      to: string;
      /** @enum {string} */
      type: "multisig";
    } | {
      from: string;
      metadata: components["schemas"]["Bridge"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "transaction";
      to: string;
      /** @enum {string} */
      type: "bridge";
    } | {
      from: string;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "collectible";
      to: string;
      /** @enum {string} */
      type: "transfer";
    } | {
      from: string;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "collectible";
      to: string;
      /** @enum {string} */
      type: "auction";
    } | {
      from: string;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "collectible";
      to: string;
      /** @enum {string} */
      type: "trade";
    } | {
      from: string;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "collectible";
      to: string;
      /** @enum {string} */
      type: "mint";
    } | {
      from: string;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "collectible";
      to: string;
      /** @enum {string} */
      type: "burn";
    } | {
      from: string;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "collectible";
      to: string;
      /** @enum {string} */
      type: "approval";
    } | {
      from: string;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "metaverse";
      to: string;
      /** @enum {string} */
      type: "mint";
    } | {
      from: string;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "metaverse";
      to: string;
      /** @enum {string} */
      type: "trade";
    } | {
      from: string;
      metadata: components["schemas"]["Swap"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "exchange";
      to: string;
      /** @enum {string} */
      type: "swap";
    } | {
      from: string;
      metadata: components["schemas"]["Liquidity"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "exchange";
      to: string;
      /** @enum {string} */
      type: "liquidity";
    } | {
      from: string;
      metadata: components["schemas"]["Staking"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "exchange";
      to: string;
      /** @enum {string} */
      type: "staking";
    } | {
      from: string;
      metadata: components["schemas"]["Post"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "social";
      to: string;
      /** @enum {string} */
      type: "post";
    } | {
      from: string;
      metadata: components["schemas"]["Post"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "social";
      to: string;
      /** @enum {string} */
      type: "revise";
    } | {
      from: string;
      metadata: components["schemas"]["Post"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "social";
      to: string;
      /** @enum {string} */
      type: "comment";
    } | {
      from: string;
      metadata: components["schemas"]["Post"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "social";
      to: string;
      /** @enum {string} */
      type: "share";
    } | {
      from: string;
      metadata: components["schemas"]["Post"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "social";
      to: string;
      /** @enum {string} */
      type: "mint";
    } | {
      from: string;
      metadata: components["schemas"]["Profile"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "social";
      to: string;
      /** @enum {string} */
      type: "proxy";
    } | {
      from: string;
      metadata: components["schemas"]["Profile"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "social";
      to: string;
      /** @enum {string} */
      type: "profile";
    } | {
      from: string;
      metadata: components["schemas"]["Profile"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "social";
      to: string;
      /** @enum {string} */
      type: "follow";
    } | {
      from: string;
      metadata: components["schemas"]["Profile"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "social";
      to: string;
      /** @enum {string} */
      type: "unfollow";
    } | {
      from: string;
      metadata: components["schemas"]["Donation"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "donation";
      to: string;
      /** @enum {string} */
      type: "donate";
    } | {
      from: string;
      metadata: components["schemas"]["SnapShot"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "governance";
      to: string;
      /** @enum {string} */
      type: "propose";
    } | {
      from: string;
      metadata: components["schemas"]["Vote"];
      platform?: components["schemas"]["Platform"];
      related_urls?: string[];
      /** @enum {string} */
      tag: "governance";
      to: string;
      /** @enum {string} */
      type: "vote";
    };
    Address: number[];
    /**
     * Asset
     * @description github.com/naturalselectionlabs/rss3api/common/schema.Asset
     */
    Asset: {
      address: components["schemas"]["Address"];
      created_at: number;
      description: string;
      external_url: string;
      id: components["schemas"]["Decimal"];
      image_url: string;
      media_url: components["schemas"]["Media1"];
      network: components["schemas"]["Network"];
      owner: components["schemas"]["Address"];
      standard: string;
      timestamp: number;
      title: string;
      updated_at: number;
    };
    /**
     * AssetsResponse
     * @description github.com/naturalselectionlabs/rss3api/internal/service/explorer/explorer/v1/handler.AssetsResponse
     */
    AssetsResponse: {
      cursor?: string;
      is_indexing: Record<string, never>;
      latest_refresh: number;
      results: (components["schemas"]["Asset"] | null)[];
    };
    /**
     * Bridge
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.Bridge
     */
    Bridge: {
      action: string;
      target_network: components["schemas"]["TargetNetwork"];
      token: components["schemas"]["Token"];
    };
    /**
     * Decimal
     * @description github.com/shopspring/decimal.Decimal
     */
    Decimal: string;
    /**
     * Direction
     * @description github.com/naturalselectionlabs/sakuin/common/schema/filter.Direction
     * @enum {string}
     */
    Direction: "in" | "out";
    /**
     * Donation
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.Donation
     */
    Donation: {
      description: string;
      logo: string;
      platform: components["schemas"]["Platform"];
      slug: string;
      title: string;
      token: components["schemas"]["Token"];
    };
    /**
     * Int
     * @description math/big.Int
     */
    Int: Record<string, never>;
    /**
     * Liquidity
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.Liquidity
     */
    Liquidity: {
      action: string;
      protocol?: string;
      tokens: components["schemas"]["Token"][];
    };
    /**
     * Media
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.Media
     */
    Media: {
      address: string;
      mime_type: string;
    };
    /**
     * Media
     * @description github.com/naturalselectionlabs/sakuin/common/schema/metadata.Media
     */
    Media1: {
      address: string;
      mime_type: string;
    };
    /**
     * MultiSig
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.MultiSig
     */
    MultiSig: {
      action: string;
      owner?: string | null;
      success?: boolean;
      threshold?: components["schemas"]["Int"] | null;
      vault: components["schemas"]["Vault"];
    };
    /**
     * Network
     * @description github.com/naturalselectionlabs/rss3api/internal/service/explorer/explorer/v1/openapi.Network
     * @enum {string}
     */
    Network: "ethereum" | "optimism" | "binance_smart_chain" | "gnosis" | "polygon" | "fantom" | "zksync_era" | "crossbell" | "base" | "arbitrum_one" | "arbitrum_nova" | "celo" | "avalanche" | "arweave" | "zksync_lite";
    /**
     * Organization
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.Organization
     */
    Organization: {
      about?: string;
      id: string;
      name: string;
      type_on_platform?: components["schemas"]["Platform"][];
    };
    /**
     * Period
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.Period
     */
    Period: {
      end: string;
      start: string;
    };
    /**
     * Platform
     * @description github.com/naturalselectionlabs/sakuin/common/schema/filter.Platform
     * @enum {string}
     */
    Platform: "1inch" | "AAVE" | "Aavegotchi" | "Arbitrum" | "Base" | "BendDAO" | "Blur" | "Carv" | "Cow" | "Crossbell" | "ENS" | "Foundation" | "Gitcoin" | "Lens" | "Lido" | "Mars4" | "MetaMask" | "Mira" | "Mirror" | "Nouns" | "OpenSea" | "Optimism" | "POAP" | "PlanetIX" | "RSS3" | "Rainbow" | "Safe" | "Synapse" | "Uniswap" | "Zerion" | "Zora" | "zkSync" | "zkSync Era" | "zkSync Lite";
    /**
     * Post
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.Post
     */
    Post: {
      action?: string;
      author?: string[];
      body?: string;
      categories?: string[];
      media?: components["schemas"]["Media"][];
      profile_id?: string;
      publication_id?: string;
      reward?: components["schemas"]["Token"] | null;
      summary?: string;
      tags?: string[];
      target?: components["schemas"]["Post"] | null;
      target_url?: string;
      title?: string;
    };
    /**
     * Profile
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.Profile
     */
    Profile: {
      action?: string;
      address: string;
      banner_uri?: string[];
      bio: string;
      expire_at?: components["schemas"]["Time"] | null;
      handle: string;
      name: string;
      platform: components["schemas"]["Platform"];
      profile_uri?: string[];
      proxy?: string;
      social_uri?: string[];
      url?: string;
    };
    /**
     * Profile
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1.Profile
     */
    Profile1: {
      Profile: components["schemas"]["Profile"];
      network: components["schemas"]["Network"];
    };
    /**
     * ProfilesResponse
     * @description github.com/naturalselectionlabs/rss3api/internal/service/explorer/explorer/v1/handler.ProfilesResponse
     */
    ProfilesResponse: {
      results: (components["schemas"]["Profile1"] | null)[];
    };
    /**
     * Proposal
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.Proposal
     */
    Proposal: {
      body?: string;
      end_at: components["schemas"]["Time"];
      id: string;
      options: string[];
      organization?: components["schemas"]["Organization"] | null;
      start_at: components["schemas"]["Time"];
      title?: string;
      type_on_platform?: components["schemas"]["Platform"][];
    };
    /**
     * RawMessage
     * @description encoding/json.RawMessage
     */
    RawMessage: number[];
    /**
     * SnapShot
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.SnapShot
     */
    SnapShot: {
      choice: components["schemas"]["RawMessage"];
      proposal: components["schemas"]["RawMessage"];
      space: components["schemas"]["RawMessage"];
    };
    /**
     * Staking
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.Staking
     */
    Staking: {
      action: string;
      period?: components["schemas"]["Period"] | null;
      token: components["schemas"]["Token"];
    };
    /**
     * Swap
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.Swap
     */
    Swap: {
      from: components["schemas"]["Token"];
      protocol?: string;
      to: components["schemas"]["Token"];
    };
    /**
     * Tag
     * @description github.com/naturalselectionlabs/sakuin/common/schema/filter.Tag
     * @enum {string}
     */
    Tag: "unknown" | "transaction" | "exchange" | "collectible" | "social" | "donation" | "governance" | "metaverse";
    /**
     * TargetNetwork
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.TargetNetwork
     */
    TargetNetwork: {
      chain_id: number;
      name: string;
      symbol: string;
    };
    /**
     * Time
     * @description time.Time
     */
    Time: Record<string, never>;
    /**
     * Token
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.Token
     */
    Token: {
      action?: string;
      animation_url?: string;
      attributes?: components["schemas"]["TokenAttribute"][];
      collection?: string;
      contract_address?: string;
      cost?: components["schemas"]["Token"] | null;
      decimals?: number;
      description?: string;
      end_time?: components["schemas"]["Time"] | null;
      external_link?: string;
      external_url?: string;
      id?: string;
      image?: string;
      name: string;
      standard: string;
      start_time?: components["schemas"]["Time"] | null;
      symbol: string;
      value?: components["schemas"]["Decimal"] | null;
      value_display?: components["schemas"]["Decimal"] | null;
    };
    /**
     * TokenAttribute
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.TokenAttribute
     */
    TokenAttribute: {
      trait_type: string;
      value: Record<string, never>;
    };
    /**
     * Transaction
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1.Transaction
     */
    Transaction: {
      actions: components["schemas"]["Action"][];
      address_from: string;
      address_to?: string;
      created_at?: components["schemas"]["Time"];
      direction: components["schemas"]["Direction"];
      fee?: components["schemas"]["Decimal"] | null;
      hash: string;
      network: components["schemas"]["Network"];
      owner: string;
      platform?: components["schemas"]["Platform"] | null;
      success: boolean;
      tag: components["schemas"]["Tag"];
      timestamp: components["schemas"]["Time"];
      type: components["schemas"]["Type"];
      updated_at?: components["schemas"]["Time"];
    };
    /**
     * TransactionResponse
     * @description github.com/naturalselectionlabs/rss3api/internal/service/explorer/explorer/v1/handler.TransactionResponse
     */
    TransactionResponse: {
      action_total_page: number | null;
      result: components["schemas"]["Transaction"] | null;
    };
    /**
     * TransactionsResponse
     * @description github.com/naturalselectionlabs/rss3api/internal/service/explorer/explorer/v1/handler.TransactionsResponse
     */
    TransactionsResponse: {
      cursor?: string;
      results: (components["schemas"]["Transaction"] | null)[];
    };
    /**
     * Transfer
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1.Transfer
     */
    Transfer: {
      address_from: string;
      address_to?: string;
      metadata: Record<string, never>;
      platform?: components["schemas"]["Platform"];
      related_urls: string[];
      tag: components["schemas"]["Tag"];
      type: components["schemas"]["Type"];
    };
    /**
     * Type
     * @description github.com/naturalselectionlabs/sakuin/common/schema/filter.Type
     */
    Type: string;
    /**
     * Vault
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.Vault
     */
    Vault: {
      address: string;
      owners?: string[];
      threshold?: components["schemas"]["Int"] | null;
      version: string;
    };
    /**
     * Vote
     * @description github.com/naturalselectionlabs/rss3api/common/schema/v1/metadata.Vote
     */
    Vote: {
      choice: string;
      proposal: components["schemas"]["Proposal"] | null;
      type_on_platform?: components["schemas"]["Platform"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
