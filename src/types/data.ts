// generated by src/types/generate.ts

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/apikey/apply": {
    post: {
      requestBody: {
        content: {
          "application/json": {
            address: string;
          };
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": components["schemas"]["APIKey"];
          };
        };
      };
    };
  };
  "/apikey/{address}": {
    get: {
      parameters: {
        path: {
          address: string;
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": components["schemas"]["APIKey"];
          };
        };
      };
    };
  };
  "/assets/{address}": {
    get: {
      parameters: {
        query?: {
          network?: components["schemas"]["NetworkName"][];
          token_address?: string;
          token_id?: string;
          cursor?: string;
          limit?: number;
          refresh?: boolean;
          block_spam?: boolean | null;
        };
        path: {
          address: string;
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": {
              address_status?: components["schemas"]["Address"][];
              cursor?: string;
              message?: string;
              result?: components["schemas"]["Asset"][];
              /** @description total number of items */
              total?: number | null;
            };
          };
        };
      };
    };
  };
  "/exchanges/{exchange_type}": {
    get: {
      parameters: {
        query?: {
          cursor?: number;
          name?: string[];
          network?: components["schemas"]["NetworkName"][];
        };
        path: {
          exchange_type: string;
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": {
              address_status?: components["schemas"]["Address"][];
              cursor?: string;
              message?: string;
              result?: components["schemas"]["ExchangeResult"][];
              /** @description total number of items */
              total?: number | null;
            };
          };
        };
      };
    };
  };
  "/mastodon/{address}": {
    get: {
      parameters: {
        query?: {
          limit?: number;
          cursor?: string;
          type?: string[];
          tag?: string[];
          network?: components["schemas"]["NetworkName"][];
          platform?: components["schemas"]["PlatformName"][];
          timestamp?: components["schemas"]["Time"];
          hash?: string;
          hash_list?: string[];
          include_poap?: boolean;
          refresh?: boolean;
          page?: number;
          query_status?: boolean;
          token_id?: string;
          count_only?: boolean;
          action_limit?: number;
        };
        path: {
          /** @description address to query */
          address: string;
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": {
              address_status?: components["schemas"]["Address"][];
              cursor?: string;
              message?: string;
              result?: components["schemas"]["Transaction"][];
              /** @description total number of items */
              total?: number | null;
            };
          };
        };
      };
    };
  };
  "/notes": {
    post: {
      requestBody: {
        content: {
          "application/json": {
            action_limit?: number;
            address: string[];
            count_only?: boolean;
            cursor?: string;
            ignore_contract?: boolean;
            include_poap?: boolean;
            limit?: number;
            network?: components["schemas"]["NetworkName"][];
            page?: number;
            platform?: components["schemas"]["PlatformName"][];
            query_status?: boolean;
            refresh?: boolean;
            tag?: string[];
            timestamp?: components["schemas"]["Time"];
            type?: string[];
          };
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": {
              address_status?: components["schemas"]["Address"][];
              cursor?: string;
              message?: string;
              result?: components["schemas"]["Transaction"][];
              /** @description total number of items */
              total?: number | null;
            };
          };
        };
      };
    };
  };
  "/notes/social": {
    post: {
      requestBody: {
        content: {
          "application/json": {
            address: string[];
            count_only?: boolean;
            cursor?: string;
            limit?: number;
            network?: components["schemas"]["NetworkName"][];
            page?: number;
            platform?: components["schemas"]["PlatformName"][];
            tag?: string[];
            timestamp?: components["schemas"]["Time"];
            type?: string[];
          };
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": {
              address_status?: components["schemas"]["Address"][];
              cursor?: string;
              message?: string;
              result?: components["schemas"]["Transaction"][];
              /** @description total number of items */
              total?: number | null;
            };
          };
        };
      };
    };
  };
  "/notes/{address}": {
    get: {
      parameters: {
        query?: {
          limit?: number;
          cursor?: string;
          type?: string[];
          tag?: string[];
          network?: components["schemas"]["NetworkName"][];
          platform?: components["schemas"]["PlatformName"][];
          timestamp?: components["schemas"]["Time"];
          hash?: string;
          hash_list?: string[];
          include_poap?: boolean;
          refresh?: boolean;
          page?: number;
          query_status?: boolean;
          token_id?: string;
          count_only?: boolean;
          action_limit?: number;
        };
        path: {
          /** @description address to query */
          address: string;
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": {
              address_status?: components["schemas"]["Address"][];
              cursor?: string;
              message?: string;
              result?: components["schemas"]["Transaction"][];
              /** @description total number of items */
              total?: number | null;
            };
          };
        };
      };
    };
  };
  "/ns/{address}": {
    get: {
      parameters: {
        path: {
          address: string;
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": components["schemas"]["NameServiceResult"];
          };
        };
      };
    };
  };
  "/platforms/notes/{platform}": {
    get: {
      parameters: {
        query?: {
          limit?: number;
          cursor?: string;
        };
        path: {
          /** @description platform to query */
          platform: components["schemas"]["PlatformName"];
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": {
              address_status?: components["schemas"]["Address"][];
              cursor?: string;
              message?: string;
              result?: components["schemas"]["Transaction"][];
              /** @description total number of items */
              total?: number | null;
            };
          };
        };
      };
    };
  };
  "/platforms/{platform_type}": {
    get: {
      parameters: {
        query?: {
          network?: components["schemas"]["NetworkName"][];
        };
        path: {
          platform_type: string;
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": {
              address_status?: components["schemas"]["Address"][];
              cursor?: string;
              message?: string;
              result?: components["schemas"]["PlatformResult"][];
              /** @description total number of items */
              total?: number | null;
            };
          };
        };
      };
    };
  };
  "/profiles": {
    post: {
      requestBody: {
        content: {
          "application/json": {
            address: string[];
            network?: components["schemas"]["NetworkName"][];
            platform?: components["schemas"]["PlatformName"][];
            refresh?: boolean;
          };
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": {
              address_status?: components["schemas"]["Address"][];
              cursor?: string;
              message?: string;
              result?: components["schemas"]["Profile"][];
              /** @description total number of items */
              total?: number | null;
            };
          };
        };
      };
    };
  };
  "/profiles/{address}": {
    get: {
      parameters: {
        query?: {
          limit?: number;
          cursor?: string;
          type?: string[];
          tag?: string[];
          network?: components["schemas"]["NetworkName"][];
          platform?: components["schemas"]["PlatformName"][];
          timestamp?: components["schemas"]["Time"];
          hash?: string;
          hash_list?: string[];
          include_poap?: boolean;
          refresh?: boolean;
          page?: number;
          query_status?: boolean;
          token_id?: string;
          count_only?: boolean;
          action_limit?: number;
        };
        path: {
          /** @description address to query */
          address: string;
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": {
              address_status?: components["schemas"]["Address"][];
              cursor?: string;
              message?: string;
              result?: components["schemas"]["Profile"][];
              /** @description total number of items */
              total?: number | null;
            };
          };
        };
      };
    };
  };
  "/tx/{hash}": {
    get: {
      parameters: {
        path: {
          hash: string;
        };
      };
      responses: {
        /** @description Response */
        200: {
          content: {
            "application/json": components["schemas"]["Transaction"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * APIKey
     * @description github.com/naturalselectionlabs/pregod/common/database/model.APIKey
     */
    APIKey: {
      address: string;
      key: string;
    };
    /**
     * Action
     * @description github.com/naturalselectionlabs/pregod/common/types.Action
     */
    Action: {
      comment?: string;
      examples?: components["schemas"]["Example"][];
      name?: string;
      platforms?: string[];
    };
    /**
     * Address
     * @description github.com/naturalselectionlabs/pregod/common/database/model.Address
     */
    Address: {
      address: string;
      count: number;
      done_networks: components["schemas"]["StringArray"];
      indexing_networks: components["schemas"]["StringArray"];
      /**
       * RawMessage
       * @description encoding/json.RawMessage
       */
      nonce: unknown;
      status: boolean;
      /**
       * Time
       * @description time.Time
       */
      updated_at: string;
    };
    /**
     * Asset
     * @description github.com/naturalselectionlabs/pregod/common/database/model.Asset
     */
    Asset: {
      attributes?: components["schemas"]["RawMessage"];
      description: string;
      image: string;
      network: components["schemas"]["NetworkName"];
      owner: string;
      related_urls: components["schemas"]["StringArray"];
      timestamp: components["schemas"]["Time"];
      title: string;
      token_address: string;
      token_id: string;
      token_standard: string;
    };
    /**
     * BatchGetNotesRequest
     * @description github.com/naturalselectionlabs/pregod/service/hub/internal/server/model.BatchGetNotesRequest
     */
    BatchGetNotesRequest: {
      action_limit?: number;
      address: string[];
      count_only?: boolean;
      cursor?: string;
      ignore_contract?: boolean;
      include_poap?: boolean;
      limit?: number;
      network?: components["schemas"]["NetworkName"][];
      page?: number;
      platform?: components["schemas"]["PlatformName"][];
      query_status?: boolean;
      refresh?: boolean;
      tag?: string[];
      timestamp?: components["schemas"]["Time"];
      type?: string[];
    };
    /**
     * BatchGetProfilesRequest
     * @description github.com/naturalselectionlabs/pregod/service/hub/internal/server/model.BatchGetProfilesRequest
     */
    BatchGetProfilesRequest: {
      address: string[];
      network?: components["schemas"]["NetworkName"][];
      platform?: components["schemas"]["PlatformName"][];
      refresh?: boolean;
    };
    /**
     * BatchGetSocialNotesRequest
     * @description github.com/naturalselectionlabs/pregod/service/hub/internal/server/model.BatchGetSocialNotesRequest
     */
    BatchGetSocialNotesRequest: {
      address: string[];
      count_only?: boolean;
      cursor?: string;
      limit?: number;
      network?: components["schemas"]["NetworkName"][];
      page?: number;
      platform?: components["schemas"]["PlatformName"][];
      tag?: string[];
      timestamp?: components["schemas"]["Time"];
      type?: string[];
    };
    /**
     * Bridge
     * @description github.com/naturalselectionlabs/pregod/common/database/model/transaction.Bridge
     */
    Bridge: {
      action: string;
      target_network: components["schemas"]["TargetNetwork"];
      token: components["schemas"]["Token"];
    };
    /**
     * CexResult
     * @description github.com/naturalselectionlabs/pregod/service/hub/internal/server/model.CexResult
     */
    CexResult: {
      address: string;
      name: string;
      network: components["schemas"]["NetworkName"];
    };
    /**
     * Decimal
     * @description github.com/shopspring/decimal.Decimal
     */
    Decimal: string;
    /**
     * DexResult
     * @description github.com/naturalselectionlabs/pregod/service/hub/internal/server/model.DexResult
     */
    DexResult: {
      address: string;
      name: string;
      network: components["schemas"]["NetworkName"];
      pair: string;
    };
    /**
     * Donation
     * @description github.com/naturalselectionlabs/pregod/common/database/model/metadata.Donation
     */
    Donation: {
      description: string;
      logo: string;
      platform: components["schemas"]["PlatformName"];
      title: string;
      token: components["schemas"]["Token"];
    };
    /**
     * Example
     * @description github.com/naturalselectionlabs/pregod/common/types.Example
     */
    Example: {
      hash?: string;
      text?: string;
    };
    /**
     * ExchangeResult
     * @description github.com/naturalselectionlabs/pregod/service/hub/internal/server/handler/doc.ExchangeResult
     */
    ExchangeResult: components["schemas"]["CexResult"] | components["schemas"]["DexResult"];
    /**
     * Int
     * @description math/big.Int
     */
    Int: number;
    /**
     * Liquidity
     * @description github.com/naturalselectionlabs/pregod/common/database/model/metadata.Liquidity
     */
    Liquidity: {
      action: string;
      protocol: string;
      tokens: components["schemas"]["Token"][];
    };
    /**
     * Media
     * @description github.com/naturalselectionlabs/pregod/common/database/model/metadata.Media
     */
    Media: {
      address: string;
      mime_type: string;
    };
    /**
     * MultiSig
     * @description github.com/naturalselectionlabs/pregod/common/database/model/metadata.MultiSig
     */
    MultiSig: {
      action: string;
      owner?: string | null;
      success?: boolean;
      /**
       * Int
       * @description math/big.Int
       */
      threshold?: number | null;
      vault: components["schemas"]["Vault"];
    };
    /**
     * NameServiceResult
     * @description github.com/naturalselectionlabs/pregod/common/database/model.NameServiceResult
     */
    NameServiceResult: {
      address: string;
      arb: string;
      avvy: string;
      bit: string;
      crossbell: string;
      cyber: string;
      ens: string;
      lens: string;
      spaceid: string;
      unstoppable_domains: string;
    };
    /**
     * NetworkName
     * @description github.com/naturalselectionlabs/pregod/service/hub/internal/server/handler/doc.NetworkName
     * @enum {string}
     */
    NetworkName: "EIP-1577" | "aptos" | "arbitrum" | "arweave" | "avalanche" | "base" | "binance_smart_chain" | "celo" | "conflux" | "crossbell" | "ethereum" | "ethereum_classic" | "fantom" | "farcaster" | "optimism" | "polygon" | "xdai" | "zksync";
    /**
     * Organization
     * @description github.com/naturalselectionlabs/pregod/common/database/model/metadata.Organization
     */
    Organization: {
      about?: string;
      id: string;
      name: string;
      type_on_platform?: components["schemas"]["PlatformName"][];
    };
    /**
     * Period
     * @description github.com/naturalselectionlabs/pregod/common/database/model/transaction.Period
     */
    Period: {
      end: string;
      start: string;
    };
    /**
     * PlatformName
     * @description github.com/naturalselectionlabs/pregod/service/hub/internal/server/handler/doc.PlatformName
     * @enum {string}
     */
    PlatformName: "0x" | "1inch" | "AAVE" | "Avvy" | "BendDAO" | "Blur" | "Crossbell" | "Curve" | "DODO" | "EIP-1577" | "ENS Registrar" | "Element" | "Farcaster" | "Foundation" | "Galaxy" | "Gem" | "Gitcoin" | "IQ.Wiki" | "Lens" | "Lenster" | "Link3" | "LooksRare" | "MetaMask" | "Mirror" | "NSwap" | "Nouns" | "OpenSea" | "Orb" | "POAP" | "PancakeSwap" | "Paraswap" | "QuickSwap" | "Quix" | "RARA" | "Rainbow" | "Snapshot" | "Sound" | "Space ID" | "SpookySwap" | "SushiSwap" | "TraderJoe" | "Uniswap" | "Unstoppable" | "Velodrome" | "Zerion" | "Zora" | "friend.tech" | "tofuNFT" | "xLog";
    /**
     * PlatformResult
     * @description github.com/naturalselectionlabs/pregod/service/hub/internal/server/model.PlatformResult
     */
    PlatformResult: {
      name: string;
      network?: components["schemas"]["NetworkName"];
      tag: string;
      type?: string;
    };
    /**
     * Post
     * @description github.com/naturalselectionlabs/pregod/common/database/model/metadata.Post
     */
    Post: {
      action?: string;
      author?: string[];
      body?: string;
      categories?: string[];
      created_at?: string;
      media?: components["schemas"]["Media"][];
      origin_note_id?: string;
      profile_id?: components["schemas"]["Int"] | null;
      publication_id?: components["schemas"]["Int"] | null;
      reward?: components["schemas"]["Token"] | null;
      summary?: string;
      tags?: string[];
      target?: components["schemas"]["Post"] | null;
      target_url?: string;
      title?: string;
      type_on_platform?: components["schemas"]["PlatformName"][];
    };
    /**
     * PostAPIKeyRequest
     * @description github.com/naturalselectionlabs/pregod/service/hub/internal/server/model.PostAPIKeyRequest
     */
    PostAPIKeyRequest: {
      address: string;
    };
    /**
     * Profile
     * @description github.com/naturalselectionlabs/pregod/common/database/model/social.Profile
     */
    Profile: {
      action?: string;
      address: string;
      banner_uri?: components["schemas"]["StringArray"];
      bio: string;
      expire_at?: components["schemas"]["Time"] | null;
      handle: string;
      name: string;
      network: components["schemas"]["NetworkName"];
      platform: components["schemas"]["PlatformName"];
      profile_uri?: components["schemas"]["StringArray"];
      proxy?: string;
      social_uri?: components["schemas"]["StringArray"];
      source: string;
      url?: string;
    };
    /**
     * Proposal
     * @description github.com/naturalselectionlabs/pregod/common/database/model/metadata.Proposal
     */
    Proposal: {
      body?: string;
      end_at: components["schemas"]["Time"];
      id: string;
      options: string[];
      organization?: components["schemas"]["Organization"] | null;
      start_at: components["schemas"]["Time"];
      title?: string;
      type_on_platform?: components["schemas"]["PlatformName"][];
    };
    /**
     * RawMessage
     * @description encoding/json.RawMessage
     */
    RawMessage: unknown;
    /**
     * Response
     * @description github.com/naturalselectionlabs/pregod/service/hub/internal/server/model.Response
     */
    Response: {
      address_status?: components["schemas"]["Address"][];
      cursor?: string;
      message?: string;
      result?: Record<string, never>;
      /** @description total number of items */
      total?: number | null;
    };
    /**
     * SnapShot
     * @description github.com/naturalselectionlabs/pregod/common/database/model/metadata.SnapShot
     */
    SnapShot: {
      choice: components["schemas"]["RawMessage"];
      proposal: components["schemas"]["RawMessage"];
      space: components["schemas"]["RawMessage"];
    };
    /**
     * Staking
     * @description github.com/naturalselectionlabs/pregod/common/database/model/transaction.Staking
     */
    Staking: {
      action: string;
      period?: components["schemas"]["Period"] | null;
      token: components["schemas"]["Token"];
    };
    /**
     * StringArray
     * @description github.com/lib/pq.StringArray
     */
    StringArray: string[];
    /**
     * Swap
     * @description github.com/naturalselectionlabs/pregod/common/database/model/metadata.Swap
     */
    Swap: {
      from: components["schemas"]["Token"];
      protocol: string;
      to: components["schemas"]["Token"];
    };
    /**
     * TargetNetwork
     * @description github.com/naturalselectionlabs/pregod/common/database/model/transaction.TargetNetwork
     */
    TargetNetwork: {
      chain_id: number;
      name: string;
      symbol: string;
    };
    /**
     * Time
     * @description time.Time
     */
    Time: string;
    /**
     * Token
     * @description github.com/naturalselectionlabs/pregod/common/database/model/metadata.Token
     */
    Token: {
      action?: string;
      animation_url?: string;
      attributes?: components["schemas"]["TokenAttribute"][];
      collection?: string;
      contract_address?: string;
      cost?: components["schemas"]["Token"] | null;
      decimals?: number;
      description?: string;
      end_time?: components["schemas"]["Time"] | null;
      external_link?: string;
      external_url?: string;
      id?: string;
      image?: string;
      name: string;
      standard: string;
      start_time?: components["schemas"]["Time"] | null;
      symbol: string;
      /**
       * Decimal
       * @description github.com/shopspring/decimal.Decimal
       */
      value?: string | null;
      value_display?: components["schemas"]["Decimal"] | null;
    };
    /**
     * TokenAttribute
     * @description github.com/naturalselectionlabs/pregod/common/database/model/metadata.TokenAttribute
     */
    TokenAttribute: {
      trait_type: string;
      value: Record<string, never>;
    };
    /**
     * Transaction
     * @description github.com/naturalselectionlabs/pregod/common/database/model.Transaction
     */
    Transaction: {
      actions: components["schemas"]["Transfer"][];
      address_from: string;
      address_to?: string;
      created_at: components["schemas"]["Time"];
      fee?: components["schemas"]["Decimal"] | null;
      hash: string;
      network: components["schemas"]["NetworkName"];
      owner: string;
      platform?: components["schemas"]["PlatformName"];
      success: boolean | null;
      tag: string;
      timestamp: components["schemas"]["Time"];
      type: string;
      updated_at: components["schemas"]["Time"];
    };
    /**
     * Transfer
     * @description For all the possible types of transfer, see the TransferTypes in this doc.
     */
    Transfer: {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "transaction";
      /** @enum {string} */
      type: "transfer";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "transaction";
      /** @enum {string} */
      type: "mint";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "transaction";
      /** @enum {string} */
      type: "burn";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "transaction";
      /** @enum {string} */
      type: "approval";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "exchange";
      /** @enum {string} */
      type: "withdraw";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "exchange";
      /** @enum {string} */
      type: "deposit";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "collectible";
      /** @enum {string} */
      type: "transfer";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "collectible";
      /** @enum {string} */
      type: "auction";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "collectible";
      /** @enum {string} */
      type: "trade";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "collectible";
      /** @enum {string} */
      type: "mint";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "collectible";
      /** @enum {string} */
      type: "burn";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "collectible";
      /** @enum {string} */
      type: "approval";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "collectible";
      /** @enum {string} */
      type: "edit";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "metaverse";
      /** @enum {string} */
      type: "mint";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "metaverse";
      /** @enum {string} */
      type: "trade";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "metaverse";
      /** @enum {string} */
      type: "list";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "metaverse";
      /** @enum {string} */
      type: "unlist";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "metaverse";
      /** @enum {string} */
      type: "claim";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "collectible";
      /** @enum {string} */
      type: "music";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["MultiSig"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "transaction";
      /** @enum {string} */
      type: "multisig";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Swap"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "exchange";
      /** @enum {string} */
      type: "swap";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Liquidity"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "exchange";
      /** @enum {string} */
      type: "liquidity";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Post"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "social";
      /** @enum {string} */
      type: "post";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Post"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "social";
      /** @enum {string} */
      type: "revise";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Post"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "social";
      /** @enum {string} */
      type: "comment";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Post"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "social";
      /** @enum {string} */
      type: "share";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Post"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "social";
      /** @enum {string} */
      type: "mint";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Post"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "social";
      /** @enum {string} */
      type: "wiki";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Post"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "social";
      /** @enum {string} */
      type: "reward";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Profile"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "social";
      /** @enum {string} */
      type: "proxy";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Profile"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "social";
      /** @enum {string} */
      type: "profile";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Profile"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "social";
      /** @enum {string} */
      type: "follow";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Profile"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "social";
      /** @enum {string} */
      type: "unfollow";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Donation"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "donation";
      /** @enum {string} */
      type: "donate";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["SnapShot"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "governance";
      /** @enum {string} */
      type: "propose";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Vote"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "governance";
      /** @enum {string} */
      type: "vote";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Staking"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "exchange";
      /** @enum {string} */
      type: "staking";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Bridge"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "transaction";
      /** @enum {string} */
      type: "bridge";
    } | {
      address_from: string;
      address_to?: string;
      index: number;
      metadata: components["schemas"]["Token"];
      platform?: components["schemas"]["PlatformName"];
      related_urls: components["schemas"]["StringArray"];
      /** @enum {string} */
      tag: "collectible";
      /** @enum {string} */
      type: "poap";
    };
    /**
     * TransferType
     * @description github.com/naturalselectionlabs/pregod/common/types.TransferType
     */
    TransferType: {
      Actions: components["schemas"]["Action"][];
      Metadata: Record<string, never>;
      Tag: string;
      Type: string;
    };
    /**
     * Vault
     * @description github.com/naturalselectionlabs/pregod/common/database/model/metadata.Vault
     */
    Vault: {
      address: string;
      owners: string[];
      threshold: components["schemas"]["Int"] | null;
      version: string;
    };
    /**
     * Vote
     * @description github.com/naturalselectionlabs/pregod/common/database/model/metadata.Vote
     */
    Vote: {
      choice: string;
      proposal: components["schemas"]["Proposal"] | null;
      type_on_platform?: components["schemas"]["PlatformName"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
