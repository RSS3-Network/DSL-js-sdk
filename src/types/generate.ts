import { spawnSync } from 'node:child_process'
import { readFileSync, writeFileSync } from 'node:fs'

main()

async function main() {
  await generate(
    'search',
    'https://dev-search.rss3.dev/v3/api-docs',
    (schema) => {
      schema.components.schemas.FeedRankActionDoc4ExternalDTO = {
        allOf: [
          {
            $ref: '#/components/schemas/FeedRankActionDoc4ExternalDetailDTO',
          },
          {
            type: 'object',
            properties: {
              search_extension: { $ref: '#/components/schemas/ActivitiesExDTO' },
            },
          },
        ],
      }

      schema.components.schemas.WikiActionDTO = {
        allOf: [
          {
            $ref: '#/components/schemas/FeedRankActionDoc4ExternalDetailDTO',
          },
          {
            type: 'object',
            properties: {
              search_extension: { $ref: '#/components/schemas/WikiExDTO' },
            },
          },
        ],
      }

      return schema
    },
    (schema) => {
      schema = schema
        .replace(/\*\/\*/g, 'application/json')
        .replace(/innerMap\?: \{[\s\S]+?\};/g, '')
        .replace(/Record<string, never>/g, 'Record<string, any>')
        .replace(/empty\?: boolean;/g, '')
        .replace(/JSONObject: {[^{}]+}/g, 'JSONObject: any')
        .replace(/metadata\?: {[^{}]+}/g, "metadata?: data['schemas']['Action']['metadata']")
        .replace(
          /FeedRankActionDoc4ExternalDetailDTO: {[^{}]+}/,
          `FeedRankActionDoc4ExternalDetailDTO: data['schemas']['Action']`,
        )

      return (schema = `import {components as data} from './data'\n${schema}`)
    },
  )

  await generate(
    'data',
    'https://api.rss3.io/data/v1/openapi?json=true',
    (schema) => {
      delete schema.components.schemas.TransferTypes
      schema.components.schemas.Platform.enum.sort()
      return schema
    },
    (schema) => {
      return schema
        .replace(/(platform\??): (\(?string\)?)(\[\])?;/g, '$1: components["schemas"]["Platform"]$3;')
        .replace(/(network\??): (\(?string\)?)(\[\])?;/g, '$1: components["schemas"]["Network"]$3;')
        .replace(/Type: Record<string, never>;/g, 'Type: string;')
        .replace(/Decimal: Record<string, never>;/g, 'Decimal: string;')
        .replace(/actions: components\["schemas"]\["Transfer"\]\[\];/g, 'actions: components["schemas"]["Action"][];')
    },
  )
}

async function generate(
  name: string,
  url: string,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  jsonFn: null | ((schema: any) => any),
  tsFn: (schema: string) => string,
) {
  let schema = await (await fetch(url)).json()
  schema = jsonFn ? jsonFn(schema) : schema
  writeFileSync(`tmp/${name}.json`, JSON.stringify(schema))
  spawnSync('npx', ['--yes', 'openapi-typescript@6.3.9', `tmp/${name}.json`, '--output', `src/types/${name}.ts`], {
    stdio: 'inherit',
  })

  schema = readFileSync(`src/types/${name}.ts`).toString()
  schema = tsFn ? tsFn(schema) : schema

  writeFileSync(`src/types/${name}.ts`, `// generated by src/types/generate.ts\n\n` + schema)
}
